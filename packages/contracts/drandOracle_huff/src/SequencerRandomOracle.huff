#include "huffmate/utils/Errors.huff"

/* Interface */
#define function unsafeGetSequencerRandom(uint256) view returns (uint256)
#define function isSequencerRandomAvailable(uint256) view returns (bool)
#define function getSequencerRandom(uint256) view returns (uint256)
#define function postCommitment(uint256,bytes32) nonpayable returns ()
#define function reveal(uint256,uint256) nonpayable returns ()
#define function getLastRevealedT() view returns (uint256)
#define function getCommitment(uint256) view returns (bytes32,bool,uint256)
#define function changeOwner(address) nonpayable returns ()
#define function owner() view returns (address)

/* Storage Slots */
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()
#define constant LAST_REVEALED_T_SLOT = FREE_STORAGE_POINTER()

/* Constants */
#define constant SEQUENCER_TIMEOUT = 0x0a
#define constant PRECOMMIT_DELAY = 0x0a

/* Events */
#define event OwnerUpdated(address indexed user, address indexed newOwner)
#define event CommitmentPosted(uint256 indexed T, bytes32 commitment)
#define event ValueRevealed(uint256 indexed T, uint256 value)
#define event RevealError(uint256 indexed T, string reason)


/* Errors */
#define error NotOwner()
#define error CommitmentMustBePostedInAdvance()
#define error CommitmentAlreadyPosted()
#define error NoCommitmentPosted()
#define error AlreadyRevealed()
#define error MustRevealInOrder()
#define error RevealTimeoutExpired()
#define error NoCommitmentFound()
#define error InvalidRevealedValue()


#define error SequencerRandomValueNotAvailable()

/* Error Macros */
#define macro NOT_OWNER() = takes(0) returns(0) {
    __ERROR(NotOwner)
    0x00 mstore
    0x04 0x00 revert
}

#define macro COMMITMENT_MUST_BE_POSTED_IN_ADVANCE() = takes(0) returns(0) {
    __ERROR(CommitmentMustBePostedInAdvance)
    0x00 mstore
    0x04 0x00 revert
}

#define macro COMMITMENT_ALREADY_POSTED() = takes(0) returns(0) {
    __ERROR(CommitmentAlreadyPosted)
    0x00 mstore
    0x04 0x00 revert
}

#define macro NO_COMMITMENT_POSTED() = takes(0) returns(0) {
    __ERROR(NoCommitmentPosted)
    0x00 mstore
    0x04 0x00 revert
}

#define macro ALREADY_REVEALED() = takes(0) returns(0) {
    __ERROR(AlreadyRevealed)
    0x00 mstore
    0x04 0x00 revert
}

#define macro MUST_REVEAL_IN_ORDER() = takes(0) returns(0) {
    __ERROR(MustRevealInOrder)
    0x00 mstore
    0x04 0x00 revert
}

#define macro REVEAL_TIMEOUT_EXPIRED() = takes(0) returns(0) {
    // Revert with "Reveal timeout expired" error
    __RIGHTPAD(0x52657665616c2074696d656f757420657870697265640000000000000000)
    0x00 mstore
    0x20 0x00 revert
}

#define macro SEQUENCER_RANDOM_VALUE_NOT_AVAILABLE() = takes(0) returns(0) {
    __ERROR(SequencerRandomValueNotAvailable)
    0x00 mstore
    0x04 0x00 revert
}



/* Macros */

/* Constructor */
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // Set the deployer as the initial owner
    caller                      // [caller]
    dup1                        // [caller, caller]
    [OWNER_SLOT]                // [OWNER_SLOT, caller, caller]
    sstore                      // [caller]
    
    // Emit OwnerUpdated event
    0x00                        // [0, caller]
    __EVENT_HASH(OwnerUpdated)  // [sig, 0, caller]
    0x00 0x00                   // [0, 0, sig, 0, caller]
    log3                        // []
}

#define macro ONLY_OWNER() = takes (0) returns (0) {
    caller                      // [msg.sender]
    [OWNER_SLOT] sload          // [owner, msg.sender]
    eq authed jumpi             // [authed]
    // Revert if not owner
    __ERROR(NotOwner)
    0x00 mstore
    0x04 0x00 revert
    authed:
}



// Change Owner
#define macro CHANGE_OWNER() = takes (0) returns (0) {
    ONLY_OWNER()
    0x04 calldataload           // [newOwner]
    dup1                        // [newOwner, newOwner]
    [OWNER_SLOT] sstore         // [newOwner]
    caller                      // [from, newOwner]
    __EVENT_HASH(OwnerUpdated)  // [sig, from, newOwner]
    0x00 0x00                   // [0, 32, sig, from, newOwner]
    log3                        // []
    stop
}

// Get Owner
#define macro OWNER() = takes(0) returns(0) {
    [OWNER_SLOT] sload    // Load the owner's address from storage
    0x00 mstore           // Store it in memory at position 0
    0x20 0x00 return      // Return 32 bytes from memory
}

#define macro UNSAFE_GET_SEQUENCER_RANDOM() = takes(0) returns(0) {
    0x04 calldataload       // load T
    dup1                    // [T, T]
    0x00 mstore             // store T at 0x00
    0x20 0x00 sha3          // compute storage slot for commitment
    sload                   // load commitment
    dup1                    // [commitment, commitment]
    0x00 eq is_zero jumpi   // if commitment is 0, jump to is_zero

    // commitment exists, check if revealed
    0x01 add sload          // load revealed flag
    iszero not_revealed jumpi

    // revealed, return the value
    0x02 add sload          // load value
    0x00 mstore             // store value at 0x00
    0x20 0x00 return        // return value

not_revealed:
    // not revealed, return hash of commitment
    0x00 mstore             // store commitment at 0x00
    0x20 0x00 sha3          // compute hash
    0x00 mstore             // store hash at 0x00
    0x20 0x00 return        // return hash

is_zero:
    // no commitment, return 0
    0x00 0x00 mstore        // store 0 at 0x00
    0x20 0x00 return        // return 0
}

#define macro IS_SEQUENCER_RANDOM_AVAILABLE() = takes(0) returns(0) {
    0x04 calldataload       // load T
    0x00 mstore             // store T at 0x00
    0x20 0x00 sha3          // compute storage slot for commitment
    sload                   // load commitment
    iszero iszero           // check if commitment is non-zero
    0x00 mstore             // store result at 0x00
    0x20 0x00 return        // return result
}

#define macro GET_SEQUENCER_RANDOM() = takes(0) returns(0) {
    UNSAFE_GET_SEQUENCER_RANDOM()
    0x00 mload              // load result
    iszero error jumpi      // if result is 0, jump to error
    0x20 0x00 return        // return result
error:
    SEQUENCER_RANDOM_VALUE_NOT_AVAILABLE()
}

#define macro POST_COMMITMENT() = takes (0) returns (0) {
    // Log entry to POST_COMMITMENT
    __FUNC_SIG("EnterPOSTCOMMITMENT()")
    0x00 mstore
    0x04 0x00 log1

    // ONLY_OWNER check
    caller                      // [msg.sender]
    [OWNER_SLOT] sload          // [owner, msg.sender]
    eq is_owner jumpi           // []
    
    // Not the owner, revert
    __ERROR(NotOwner)           // [error_selector]
    0x00 mstore                 // []
    0x04 0x00 revert            // []

is_owner:
    // Load T and commitment from calldata
    0x04 calldataload           // [T]
    0x24 calldataload           // [commitment, T]

    // Compute storage slot for T
    swap1                       // [T, commitment]
    0x00 mstore                 // [commitment]
    0x20 0x00 sha3              // [slot, commitment]

    // Store the commitment
    sstore                      // []

    // Emit CommitmentPosted event
    0x04 calldataload           // [T]
    0x24 calldataload           // [commitment, T]
    __EVENT_HASH(CommitmentPosted)
    0x00 0x00 log3

    // Return successfully
    0x01 0x00 mstore            // Store success value
    0x20 0x00 return            // Return success
}


#define macro REVEAL() = takes(0) returns(0) {
    // Load T and value
    0x04 calldataload   // [T]
    0x24 calldataload   // [value, T]

    // Emit ValueRevealed event (swapping the order)
    swap1               // [T, value]
    __EVENT_HASH(ValueRevealed)  // [event_hash, T, value]
    0x00 0x00                    // [0, 0, event_hash, T, value]
    log3                         // []

    // Store T and value in memory (for debugging)
    0x04 calldataload 0x00 mstore  // Store T at 0x00
    0x24 calldataload 0x20 mstore  // Store value at 0x20

    // Log the values (for debugging)
    __FUNC_SIG("RevealValues(uint256,uint256)")
    0x00 mstore
    0x40 0x00 log1

    // Return success
    0x01 0x00 mstore    // Store 1 to indicate success
    0x20 0x00 return    // Return 32 bytes
}

#define macro GET_LAST_REVEALED_T() = takes(0) returns(0) {
    [LAST_REVEALED_T_SLOT] sload  // load lastRevealedT
    0x00 mstore                   // store at memory position 0
    0x20 0x00 return              // return 32 bytes from memory
}

#define macro GET_COMMITMENT() = takes(0) returns(0) {
    0x04 calldataload       // load T
    0x00 mstore             // store T at 0x00
    0x20 0x00 sha3          // compute storage slot for commitment
    dup1 sload              // [commitment, slot]
    0x00 mstore             // store commitment at 0x00
    0x01 add                // [slot + 1]
    dup1 sload              // [revealed, slot + 1]
    0x20 mstore             // store revealed at 0x20
    0x01 add                // [slot + 2]
    sload                   // [value]
    0x40 mstore             // store value at 0x40
    0x60 0x00 return        // return 96 bytes from memory
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(reveal) eq reveal jumpi
    dup1 __FUNC_SIG(postCommitment) eq post_commitment jumpi
    dup1 __FUNC_SIG(changeOwner) eq change_owner jumpi
    dup1 __FUNC_SIG(owner) eq owner jumpi
    dup1 __FUNC_SIG(getLastRevealedT) eq get_last_revealed_t jumpi
    dup1 __FUNC_SIG(getCommitment) eq get_commitment jumpi

    0x00 0x00 revert

reveal:
    REVEAL()
post_commitment:
    POST_COMMITMENT()
change_owner:
    CHANGE_OWNER()
owner:
    OWNER()
get_last_revealed_t:
    GET_LAST_REVEALED_T()
get_commitment:
    GET_COMMITMENT()
}
